name: Plan
on:
  pull_request:
    types:
      - closed

env:
  AWS_REGION: us-west-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GITHUB_APP_ID: ${{ vars.GH_APP_ID }}
  GITHUB_APP_INSTALLATION_ID: ${{ vars.GH_APP_INSTALLATION_ID }}
  GITHUB_APP_PEM_FILE: ${{ secrets.GH_APP_PEM_FILE }}

jobs:
  apply:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
      - name: init
        run: terraform init
      - name: apply
        id: apply
        run: terraform apply -auto-approve
      - name: comment
        uses: actions/github-script@v7
        env:
          PLAN: ${{ steps.apply.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Terraform Apply')
            });

            // 2. Compose comment
            const output = `#### Terraform Apply ðŸ“–\`${{ steps.apply.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${ process.env.PLAN }\`\`\`

            </details>`;

            // 3. Update or create comment
            if (botComment) {
                await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                    body: output,
                });
                return;
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
