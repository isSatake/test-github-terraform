name: Plan
on:
  pull_request:
    branches:
      - main

env:
  TF_VAR_github_app_id: ${{ vars.GH_APP_ID }}
  TF_VAR_github_app_installation_id: ${{ vars.GH_APP_INSTALLATION_ID }}
  TF_VAR_github_app_pem_file: ${{ secrets.GH_APP_PEM_FILE }}

jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
      - name: format
        run: terraform fmt -check -recursive
      - name: init
        run: terraform init -backend-config="region=us-west-2" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      - name: plan
        id: plan
        run: terraform plan -no-color
      - name: comment
        uses: actions/github-script@v7
        env:
          RESULT: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // コメント可能な最大長(65535)を超えそうな場合は切り詰める
            const outputLength = 65000;
            const result = process.env.RESULT;
            let truncatedResult;
            if (process.env.length > outputLength) {
              truncatedResult = result.substring(result.length - outputLength);
            }

            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
            });

            // 2. Compose comment
            const output = `#### Terraform Apply 📖\`${{ steps.plan.outcome }}\`
            ${ truncatedResult ? '\nTerraform plan too long. Refer to its workflow run in Actions tab for the full-length plan.\n' : ''}
            <details><summary>Show Result</summary>

            \`\`\`${ truncatedResult ?? result }\`\`\`

            // 3. Update or create comment
            if (botComment) {
                await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                    body: output,
                });
                return;
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
